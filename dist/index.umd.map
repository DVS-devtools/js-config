{"version":3,"sources":["index.js"],"names":["getNestedKey","object","key","replace","split","reduce","o","k","undefined","Config","get","bind","list","options","config","upperCase","value","falseValues","confValue","toUpperCase","indexOf"],"mappings":";AA0Ee,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EA1Ef,IAAMA,EAAe,SAACC,EAAQC,GAInBA,OAFPA,GADAA,EAAMA,EAAIC,QAAQ,aAAc,QACtBA,QAAQ,MAAO,KAEdC,MAAM,KACZC,OAAO,SAACC,EAAGC,GACDD,OAAAA,EAAIA,EAAEC,QAAKC,GACnBP,IAOLQ,EA4DS,WA3DG,SAAA,IAAA,EAAA,KAAA,GACLC,KAAAA,IAAM,KAAKA,IAAIC,KAAK,MACpBC,KAAAA,KAAO,KAAKA,KAAKD,KAAK,MAyDpB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAzCsC,MAAA,WAA5CE,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,CAAEC,OAAQ,GAAIC,WAAW,GAChCF,GAAWA,EAAQC,SACdA,KAAAA,OAASD,EAAQC,OACjBC,KAAAA,UAAYF,EAAQE,aAsCtB,CAAA,IAAA,MAvBPC,MAAAA,SAAAA,GACMC,IAGAC,GAAoC,KAD1CF,EAAQ,KAAKD,UAAYC,EAAMG,cAAgBH,GACvBI,QAAQ,KAAcpB,EAAa,KAAKc,OAAQE,GAAS,KAAKF,OAAOE,GAEzFC,OAAoC,IALpB,CAAC,GAAI,EAAG,IAAK,KAAM,QAAQ,EAAO,SAKtCG,QAAQF,IAGjBA,IAcA,CAAA,IAAA,OALJ,MAAA,WACI,OAAA,KAAKJ,WAIL,EAAA,GAAA,EAAA,IAAIL,EAAJ,QAAA,QAAA","file":"index.umd.map","sourceRoot":"../src","sourcesContent":["const getNestedKey = (object, key) => {\n    key = key.replace(/\\[(\\w+)\\]/g, '.$1');\n    key = key.replace(/^\\./, '');\n\n    return key.split('.')\n        .reduce((o, k) => { // eslint-disable-line arrow-body-style\n            return o ? o[k] : undefined;\n        }, object);\n};\n\n/**\n * @class Config\n * @description Simple library to get config value from a given object, supports nested values.\n */\nclass Config {\n    constructor() {\n        this.get = this.get.bind(this);\n        this.list = this.list.bind(this);\n    }\n\n    /**\n     * @memberOf Config\n     * @function init\n     * @description Initialize the Config class\n     * @param {Object} options (see attributes below)\n     * @param {Object} [options.config = {}] config object from which to fetch\n     * @param {boolean} [options.upperCase = false] transform the keys in uppercase\n     * @example\n     * Config.init({\n     *   config: configObject,\n     *   upperCase: false,\n     * })\n     */\n    init(options = { config: {}, upperCase: false }) {\n        if (options && options.config) {\n            this.config = options.config;\n            this.upperCase = options.upperCase;\n        }\n    }\n\n    /**\n     * @memberOf Config\n     * @function get\n     * @description Search the given key (supports dot notation),\n     * returns the value if found, undefined if not found,\n     * false if the value is a false value `('', 0, '0', null, 'null', false, 'false')`\n     * @param {String} value the key to search\n     * @returns {*}\n     * @example\n     * Config.get('foo.bar');\n     */\n    get(value) {\n        const falseValues = ['', 0, '0', null, 'null', false, 'false'];\n\n        value = this.upperCase ? value.toUpperCase() : value;\n        const confValue = value.indexOf('.') !== -1 ? getNestedKey(this.config, value) : this.config[value];\n\n        if (falseValues.indexOf(confValue) !== -1) {\n            return false;\n        }\n        return confValue;\n    }\n\n    /**\n     * @memberOf Config\n     * @function list\n     * @description Returns the entire config object\n     * @returns {Config.options.config|{}|*}\n     */\n    list() {\n        return this.config;\n    }\n}\n\nexport default new Config();"]}